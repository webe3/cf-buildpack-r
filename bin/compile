#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
set -x

shopt -s extglob

function error() {
  echo " !     $*" >&2
  exit 1
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function read_var() {
  echo $(head -n 1 $1)
}

# clean up leaking environment
unset GIT_DIR

# parse and derive params
BUILDPACK_DIR="$(dirname $(dirname $0))"
BUILD_DIR=$1
CACHE_DIR=$2

# ensure exist
mkdir -p $BUILD_DIR
mkdir -p $CACHE_DIR

# fix STACK variable if unset
if [ -z "${STACK}" ];
then
  STACK="cedar-14"
fi

# config
VENDOR_DIR="$BUILD_DIR/vendor"
GCC_VERSION=4.8

# read in R version if file exists
if [[ -f "$BUILD_DIR/.r-version" ]];
then
  R_VERSION=`read_var $BUILD_DIR/.r-version`
else
  R_VERSION="3.2.4"
fi

# read in buildback binary version if file exists
if [[ -f "$BUILD_DIR/.r-buildpack-version" ]];
then
  BUILD_PACK_VERSION=`read_var $BUILD_DIR/.r-buildpack-version`
else
  BUILD_PACK_VERSION="20160322-0811"
fi

S3_BUCKET="heroku-buildpack-r"
R_BINARIES="http://${S3_BUCKET}.s3.amazonaws.com/${STACK}/R-${R_VERSION}-binaries-${BUILD_PACK_VERSION}.tar.gz"
CRAN_MIRROR="http://cran.revolutionanalytics.com"

# vendor R into the slug
echo "CACHE_DIR is $CACHE_DIR, BUILD_DIR is $BUILD_DIR"
echo "Vendoring R $R_VERSION for $STACK stack ($BUILD_PACK_VERSION)" | indent

# Check if we can pull from cache rather than downloading
if [[ -f "$CACHE_DIR/.r-version" ]] &&
   [[ "$(read_var $CACHE_DIR/.r-version)" = "$R_VERSION" ]] &&
   [[ -f "$CACHE_DIR/.r-buildpack-version" ]] &&
   [[ "$(read_var $CACHE_DIR/.r-buildpack-version)" = "$BUILD_PACK_VERSION" ]];
then

  # copy from cache to the build directory
  echo "Retrieving R binaries and packages from cache" | indent
  cp -r $CACHE_DIR/vendor $BUILD_DIR

else

  # download and unpack binaries
  echo "Downloading and unpacking R binaries ($R_BINARIES)" | indent
  curl $R_BINARIES -s -o - | tar xzf - -C $BUILD_DIR

fi

#
# expected initial layout of $BUILD_DIR
#
#  $BUILD_DIR
#   |- vendor    # <= $VENDOR_DIR
#      |- .apt   # <= this is here, to prevent clashes, but will be moved
#      |- R
#

# this buildpack may be used together with heroku-buildpack-apt
# in which case, there may be additional dependancies which need
# to be copied to /app/.apt, so that R can find them
if [ -d $BUILD_DIR/.apt ]; then

  # move the app authors binaries
  echo "Copying existing .apt files" | indent
  cp -r $BUILD_DIR/.apt /app

  # the buildpack binaries will be merged with these
  # so there may be issues if different versions
  # are included over those from the R buildpack

  echo "Merging buildpack .apt files" | indent
  cp -r $VENDOR_DIR/.apt/* /app/.apt

  rm -rf $BUILD_DIR/.apt
  rm -rf $VENDOR_DIR/.apt

else

  # move the binary dependances to /app/.apt
  # so that R can find them when compiling packages
  mv $VENDOR_DIR/.apt /app

fi

# move the R binaries to /app/vendor/R
mv $VENDOR_DIR/R /app/vendor

# trialed and errored on this; copy over libs to gfortran, so
# that liblto_plugin.so and others can be found
# (tried using LDFLAGS, LD_LIBRARY_PATH and LIBRARY_PATH but didn't work)
cp -r /usr/lib/gcc/x86_64-linux-gnu/$GCC_VERSION/* /app/.apt/usr/lib/gcc/x86_64-linux-gnu/$GCC_VERSION

# prevent warnings when building packages
# since these directories/files aren't included
# in the buildpack to make it smaller
mkdir -p /app/vendor/R/lib64/R/doc/html
touch /app/vendor/R/lib64/R/doc/html/R.css

#
# expected layout
#
#  /app
#    /.apt
#    /vendor
#      /R
#
# NOTE: there are a whole bunch more directories
# and files here, provided by Heroku, which we
# aren't interested in, so ignoring them
#

# set environment variables, needed for compiling packages
source "$BUILDPACK_DIR/bin/r_environment.sh"

# install dependencies from CRAN
echo "Executing init.r script" | indent

# set the CRAN mirror and run the init.r program
# NOTE: output can't be indented unfortunately
/app/vendor/R/bin/R --no-save -s <<RPROG
  cat("\n=====> init.r Starting...\n")
  Sys.setenv(BUILD_DIR="$BUILD_DIR")
  setwd("/app")
  r <- getOption("repos");
  r["CRAN"] <- "$CRAN_MIRROR";
  options(repos=r);
  `cat $BUILD_DIR/init.r`
  cat("\n=====> init.r Completed Successfully\n")
RPROG

# TODO: determine whether the R script failed
echo
echo "R $R_VERSION successfully installed" | indent

#
# need to copy binaries back to the build directory so that any
# installed packages and other dependances get included in the slug

# copy over environment
mkdir -p "$BUILD_DIR/.profile.d"
cp "$BUILDPACK_DIR/bin/r_environment.sh" "$BUILD_DIR/.profile.d/r_environment.sh"

# now copy everything back to the BUILD_DIR
# which will be used to make the slug
cp -r /app/.apt $BUILD_DIR
cp -r /app/vendor/R $VENDOR_DIR

#
# layout of $BUILD_DIR now
#
#  $BUILD_DIR
#   |- .apt
#   |- vendor    # <= $VENDOR_DIR
#      |- R
#

# copy to the cache directory
echo "$R_VERSION" > "$CACHE_DIR/.r-version"
echo "$BUILD_PACK_VERSION" > "$CACHE_DIR/.r-buildpack-version"
mkdir -p $CACHE_DIR/vendor
cp -r /app/.apt $CACHE_DIR/vendor
cp -r /app/vendor/R $CACHE_DIR/vendor
